Akka was built on the reactive manifesto which is a signed public declaration of the important aspects of reactive systems
@misc{reactivemanifesto,
  title={The Reactive Manifesto},
  author={Jonas Bonér, Dave Farley, Roland Kuhn and Martin Thompson},
  howpublished={https://www.reactivemanifesto.org/},
  note={Published: 2014-09-16, Accessed: 2022-03-17}
}

@misc{eventloopbrowser,
  title={The event loop},
  howpublished={https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop},
  note={Accessed: 2022-03-18}
}

@misc{eventloopnode,
  title={The Node.js Event Loop, Timers, and process.nextTick()},
  howpublished={https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/},
  note={Accessed: 2022-03-18}
}

@misc{nexttick,
  title={Understanding process.nextTick()},
  howpublished={https://nodejs.dev/learn/understanding-process-nexttick},
  note={Accessed: 2022-03-18}
}

ECMA-262 8th Edition Standard
@misc{es8,
  title={ECMAScript® 2017 Language Specification (ECMA-262, 8th edition, June 2017)},
  howpublished={https://262.ecma-international.org/8.0},
  note={Accessed: 2022-04-01}
}

Shared Array Buffer which was introduced in ES8
@misc{sharedarraybuffer,
  title={SharedArrayBuffer},
  howpublished={https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/SharedArrayBuffer},
  note={Accessed: 2022-04-01}
}

@misc{cluster,
  title={Node.js v17.7.2 documentation},
  howpublished={https://nodejs.org/api/cluster.html},
  note={Accessed: 2022-03-19}
}

@misc{webworkers,
  title={Web Workers API},
  howpublished={https://developer.mozilla.org/Web/API/Web\_Workers\_API},
  note={Accessed: 2022-03-19}
}

One of the first papers concretising the actor model for AI. Mostly mathematical and not very practical
@techreport{agha1985actors,
  title={Actors: A model of concurrent computation in distributed systems.},
  author={Agha, Gul A},
  year={1985},
  institution={Massachusetts Inst of Tech Cambridge Artificial Intelligence Lab}
}

@inproceedings{hewitt1973session,
  title={Session 8 formalisms for artificial intelligence a universal modular actor formalism for artificial intelligence},
  author={Hewitt, Carl and Bishop, Peter and Steiger, Richard},
  booktitle={Advance Papers of the Conference},
  volume={3},
  pages={235},
  year={1973},
  organization={Stanford Research Institute Menlo Park, CA}
}

A paper describing the efforts of porting the JVM Akka to JS. 
This project was built on scala-js-actor and is written to mimic JVM Akka code
@inproceedings{stivan2015akka,
  title={Akka. js: towards a portable actor runtime environment},
  author={Stivan, Gianluca and Peruffo, Andrea and Haller, Philipp},
  booktitle={Proceedings of the 5th International Workshop on Programming Based on Actors, Agents, and Decentralized Control},
  pages={57--64},
  year={2015}
}

An article proposing that all physically possible computation can be directly implemented using actors
Talks about how actors should be built. Embracing inconsistency and failure and performing on a best effort basis.
@article{hewitt2010actor,
  title={Actor model of computation: scalable robust information systems},
  author={Hewitt, Carl},
  journal={arXiv preprint arXiv:1008.1459},
  year={2010}
}

A very useful paper regarding the history of actors. 
It attempts to informally classify attributes that make up an actor system with respect to message processing, reception, state changes and actors per execution environment
@inproceedings{43years,
  title={43 years of actors: A taxonomy of actor models and their key properties},
  author={De Koster, Joeri and Van Cutsem, Tom and De Meuter, Wolfgang},
  booktitle={Proceedings of the 6th International Workshop on Programming Based on Actors, Agents, and Decentralized Control},
  pages={31--40},
  year={2016}
}

Paper comparing Scala Actors to Akka Actors, explaining the reason behind certain design decisions for these languages.
It talks about how programmers interface with actors in the two implementations as well as some challenges which the designs face.
It then talks about the sought after aspects of the actor runtime
@incollection{haller2012integration,
  title={On the integration of the actor model in mainstream technologies: the scala perspective},
  author={Haller, Philipp},
  publisher = {Association for Computing Machinery},
  booktitle={Proceedings of the 2nd edition on Programming systems, languages and applications based on actors, agents, and decentralized control abstractions},
  pages={1--6},
  year={2012}
}

Talks about  using JavaScript for high performance network programs
@article{highperformance,
  title={Node. js: Using JavaScript to build high-performance network programs},
  author={Tilkov, Stefan and Vinoski, Steve},
  journal={IEEE Internet Computing},
  volume={14},
  number={6},
  pages={80--83},
  year={2010},
  publisher={IEEE}
}

@techreport{haller2010isolated,
  title={Isolated actors for race-free concurrent programming},
  author={Haller, Philipp},
  year={2010},
  institution={EPFL}
}

Look into ECMAScript concurrency features, generators, await
@article{concurrencyjs,
  title={JavaScript Concurrency Models},
  author={Namiot, Dmitry and Sukhomlin, Vladimir},
  journal={International Journal of Open Information Technologies},
  volume={3},
  number={6},
  pages={21--24},
  year={2015}
}

Similar academic work
@inproceedings{spidersjs,
  title={Many spiders make a better web: a unified web-based actor framework},
  author={Myter, Florian and Scholliers, Christophe and De Meuter, Wolfgang},
  booktitle={Proceedings of the 6th International Workshop on Programming Based on Actors, Agents, and Decentralized Control},
  pages={51--60},
  year={2016}
}

Testing suite for the actor model
@inproceedings{savina,
author = {Imam, Shams M. and Sarkar, Vivek},
title = {Savina - An Actor Benchmark Suite: Enabling Empirical Evaluation of Actor Libraries},
year = {2014},
isbn = {9781450321891},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2687357.2687368},
doi = {10.1145/2687357.2687368},
abstract = {This paper introduces the Savina benchmark suite for actor-oriented programs. Our goal is to provide a standard benchmark suite that enables researchers and application developers to compare different actor implementations and identify those that deliver the best performance for a given use-case. The benchmarks in Savina are diverse, realistic, and represent compute (rather than I/O) intensive applications. They range from popular micro-benchmarks to classical concurrency problems to applications that demonstrate various styles of parallelism. Implementations of the benchmarks on various actor libraries are made publicly available through an open source release. This will allow other developers and researchers to compare the performance of their actor libraries on these common set of benchmarks.},
booktitle = {Proceedings of the 4th International Workshop on Programming Based on Actors Agents & Decentralized Control},
pages = {67–80},
numpages = {14},
keywords = {benchmark suite, actor model, java actor libraries, performance comparison},
location = {Portland, Oregon, USA},
series = {AGERE! '14}
}

